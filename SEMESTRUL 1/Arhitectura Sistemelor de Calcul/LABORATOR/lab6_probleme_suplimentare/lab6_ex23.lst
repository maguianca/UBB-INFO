     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0204020502020404            sir db 2, 4, 2, 5, 2, 2, 4, 4 
    14                                      len equ $-sir
    15 00000008 0000<rept>                  rez times len+1 dw 0
    16 0000001A 00                          nr db 0
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;1.sortam sirul strict crescator
    22 00000000 B908000000                      mov ecx,len
    23 00000005 BE00000000                      mov esi,0
    24 0000000A 49                              dec ecx
    25                                      loop_1:
    26 0000000B 8A86[00000000]                  mov al,[sir+esi]
    27 00000011 89F3                            mov ebx,esi
    28 00000013 43                              inc ebx
    29                                      loop_2:
    30 00000014 8A93[00000000]                  mov dl,[sir+ebx]
    31 0000001A 38D0                            cmp al,dl
    32 0000001C 720E                            jb no_swap
    33                                          
    34 0000001E 8883[00000000]                  mov [sir+ebx],al
    35 00000024 8896[00000000]                  mov [sir+esi],dl
    36 0000002A 88D0                            mov al,dl
    37                                      no_swap:
    38 0000002C 43                              inc ebx
    39 0000002D 83FB08                          cmp ebx,len
    40 00000030 72E2                            jb loop_2
    41                                      next:
    42 00000032 46                              inc esi
    43 00000033 E2D6                            loop loop_1
    44                                      ;2.parcurgem sirul si introducem in sirul rez
    45                                          ;mov esi,0
    46                                          ;mov bl,[sir+esi]
    47                                          ;inc esi
    48                                          ;mov edi,0
    49                                          ;mov ecx,len
    50                                          ;dec ecx
    51                                          ;mov byte[nr],1
    52                                      ;repeta:
    53                                          ;mov al,[esi+sir]
    54                                          ;cmp bl,al
    55                                          ;jne peste
    56                                          ;jmp aici
    57                                          ;peste:
    58                                          ;mov dl,byte[nr]
    59                                          ;mov [edi+rez],bl
    60                                          ;mov [edi+1+rez],dl
    61                                          ;add edi,2
    62                                          ;mov byte[nr],1
    63                                          ;jmp aici_2
    64                                          ;aici:
    65                                          ;add byte[nr],1
    66                                          ;aici_2:
    67                                          ;inc esi
    68                                          ;mov bl,al
    69                                          ;loop repeta
    70 00000035 BE[00000000]                    mov esi,sir
    71 0000003A BF[08000000]                    mov edi,rez
    72 0000003F AC                              lodsb
    73 00000040 88C3                            mov bl,al
    74 00000042 B908000000                      mov ecx,len
    75 00000047 49                              dec ecx
    76 00000048 B201                            mov dl,1
    77                                      repeta:
    78 0000004A AC                              lodsb
    79 0000004B 38D8                            cmp al,bl
    80 0000004D 7406                            je sari
    81 0000004F AA                              stosb
    82 00000050 88D8                            mov al,bl
    83 00000052 AA                              stosb
    84 00000053 B201                            mov dl,1
    85                                      sari:
    86 00000055 FEC2                            inc dl
    87 00000057 E2F1                            loop repeta
    88 00000059 88D8                            mov al,bl
    89 0000005B AA                              stosb
    90 0000005C 88D0                            mov al,dl
    91 0000005E AA                              stosb
    92                                          ;mov dl,byte[nr]
    93                                          ;mov [edi+rez],bl
    94                                          ;mov [edi+1+rez],dl
    95                                      
    96                                          ; exit(0)
    97 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    98 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
