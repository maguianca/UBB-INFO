     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  ;sir DD 12345678h 1256ABCDh, 12AB4344h
    11                                  ;rezultatul va fi
    12                                  ;1234ABCDh, 12565678h, 12AB4344h.
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 78563412CDAB561244-         sir DD 12345678h,1256ABCDh,12ABAA44h
    15 00000009 AAAB12             
    16                                      len equ ($-sir)/2
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 B906000000                      mov ecx,len 
    22 00000005 E339                            jecxz final
    23 00000007 49                              dec ecx
    24 00000008 BE00000000                      mov esi,0
    25                                       loop_1:
    26 0000000D 668B86[00000000]                mov ax,[sir+esi]
    27 00000014 89F3                            mov ebx,esi
    28 00000016 83C304                          add ebx,4
    29                                          loop_2:
    30 00000019 668B93[00000000]                    mov dx,[sir+ebx]
    31 00000020 6639D0                              cmp ax,dx
    32 00000023 770E                                ja no_swap
    33                                              
    34 00000025 668983[00000000]                    mov [sir+ebx],ax
    35 0000002C 668996[00000000]                    mov [sir+esi],dx
    36                                          no_swap:
    37 00000033 83C302                              add ebx,2
    38 00000036 83FB06                              cmp ebx,len
    39 00000039 72DE                                jb loop_2
    40                                           
    41                                          next:
    42 0000003B 83C604                              add esi,4
    43 0000003E E2CD                                loop loop_1
    44                                          
    45                                      
    46                                      final:
    47 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
