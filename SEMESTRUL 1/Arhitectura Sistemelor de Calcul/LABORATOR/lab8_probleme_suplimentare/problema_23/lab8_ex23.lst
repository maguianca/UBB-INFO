     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fclose,fprintf
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll    
    10                                  import fclose msvcrt.dll    
    11                                  import fprintf msvcrt.dll    
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 6F75747075742E7478-         nume_fisier db "output.txt",0
    14 00000009 7400               
    15 0000000B 7700                        mod_acces db "w",0
    16 0000000D FFFFFFFF                    descriptor_fisier dd -1
    17 00000011 7C00                        a dw 124
    18 00000013 25630D00                    format_cifra db "%c",13,0
    19 00000017 00<rept>                    result times 100 db 0
    20 0000007B 00000000                    len dd 0
    21 0000007F 10                          hexa db 16
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 68[0B000000]                    push dword mod_acces 
    27 00000005 68[00000000]                    push dword nume_fisier 
    28 0000000A FF15[00000000]                  call [fopen]
    29 00000010 83C408                          add esp,4*2
    30                                          
    31 00000013 83F800                          cmp eax,0
    32 00000016 7474                            je finalizare_scriere
    33 00000018 A3[0D000000]                    mov [descriptor_fisier],eax
    34                                          
    35 0000001D B800000000                      mov eax,0
    36 00000022 BA00000000                      mov edx,0
    37 00000027 66A1[11000000]                  mov ax,word[a]
    38 0000002D BE00000000                      mov esi,0
    39 00000032 BB00000000                      mov ebx,0
    40                                      repeta:
    41 00000037 F635[7F000000]                  div byte[hexa]
    42 0000003D 88E3                            mov bl,ah
    43 0000003F 80FB09                          cmp bl,9
    44 00000042 7705                            ja peste
    45 00000044 80C330                          add bl,'0'
    46 00000047 EB06                            jmp aici
    47                                          peste:
    48 00000049 80EB0A                          sub bl,10 
    49 0000004C 80C361                          add bl,'a'
    50                                          aici:
    51 0000004F 889E[17000000]                  mov[esi+result],bl
    52 00000055 B400                            mov ah,0
    53 00000057 46                              inc esi
    54 00000058 3C00                            cmp al,0 
    55 0000005A 75DB                            jne repeta
    56                                          
    57 0000005C 8935[7B000000]                  mov dword[len],esi
    58 00000062 8B0D[7B000000]                  mov ecx,dword[len]
    59 00000068 BE[17000000]                    mov esi,result
    60                                      bucla:
    61 0000006D 51                              push ecx
    62 0000006E B800000000                      mov eax,0
    63 00000073 AC                              lodsb 
    64 00000074 50                              push dword eax
    65 00000075 68[13000000]                    push dword format_cifra
    66 0000007A FF35[0D000000]                  push dword [descriptor_fisier]
    67 00000080 FF15[00000000]                  call [fprintf]
    68 00000086 83C40C                          add esp,4*3
    69 00000089 59                              pop ecx
    70 0000008A E2E1                            loop bucla
    71                                      
    72                                      finalizare_scriere:
    73 0000008C FF35[0D000000]                  push dword[descriptor_fisier]
    74 00000092 FF15[00000000]                  call [fclose]
    75 00000098 83C404                          add esp,4
    76                                          
    77 0000009B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    78 0000009D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
