     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fprintf,fopen,fclose
     8                                  import exit msvcrt.dll   
     9                                  import fprintf msvcrt.dll   
    10                                  import fopen msvcrt.dll   
    11                                  import fclose msvcrt.dll   
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 6F75747075742E7478-         nume_fisier db "output.txt",0
    14 00000009 7400               
    15 0000000B 7700                        mod_acces db "w",0
    16 0000000D FFFFFFFF                    descriptor_fisier dd -1
    17 00000011 87480000                    a dd 18567
    18 00000015 00<rept>                    sir times 100 db 0
    19 00000079 00<rept>                    invers times 100 db 0
    20 000000DD 25630D00                    format_afisare db "%c",13,0
    21 000000E1 00000000                    len dd 0
    22 000000E5 0A000000                    zece dd 10
    23 000000E9 257300                      format_sir db "%s",0
    24                                  
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      inversare:
    28 00000000 60                              pushad
    29 00000001 BE[15000000]                    mov esi,sir
    30 00000006 BF[79000000]                    mov edi,invers
    31 0000000B 8B0D[E1000000]                  mov ecx,dword[len]
    32 00000011 01CF                            add edi,ecx
    33 00000013 4F                              dec edi
    34                                      bucla:
    35 00000014 FC                              cld
    36 00000015 AC                              lodsb 
    37 00000016 FD                              std 
    38 00000017 AA                              stosb
    39 00000018 E2FA                            loop bucla
    40 0000001A 61                              popad
    41 0000001B C3                              ret
    42                                      start:
    43 0000001C 68[0B000000]                    push dword mod_acces
    44 00000021 68[00000000]                    push dword nume_fisier
    45 00000026 FF15[00000000]                  call [fopen]
    46 0000002C 83C408                          add esp,4*2
    47                                          
    48 0000002F 83F800                          cmp eax,0
    49 00000032 746C                            je finalizare_scriere
    50 00000034 A3[0D000000]                    mov dword[descriptor_fisier],eax
    51 00000039 BA00000000                      mov edx,0
    52 0000003E A1[11000000]                    mov eax,dword[a]
    53 00000043 BE00000000                      mov esi,0
    54                                      repeta:
    55 00000048 F735[E5000000]                  div dword[zece]
    56 0000004E 89D3                            mov ebx,edx
    57 00000050 83C330                          add ebx,'0'
    58 00000053 899E[15000000]                  mov [esi+sir],ebx
    59 00000059 46                              inc esi
    60 0000005A BA00000000                      mov edx,0
    61 0000005F 8305[E1000000]01                add dword[len],1
    62 00000066 83F800                          cmp eax,0
    63 00000069 75DD                            jnz repeta
    64                                          
    65                                          ;call inversare
    66                                          ;cld
    67                                          ;push dword invers
    68                                          ;push dword format_sir
    69                                          ;push dword [descriptor_fisier]
    70                                          ;call [fprintf]
    71                                          ;add esp,4*3
    72                                          
    73 0000006B E890FFFFFF                      call inversare
    74 00000070 FC                              cld
    75 00000071 8B0D[E1000000]                  mov ecx,dword[len]
    76 00000077 BE[79000000]                    mov esi,invers
    77 0000007C B800000000                      mov eax,0
    78                                      bucla_2:
    79 00000081 AC                              lodsb 
    80 00000082 51                              push ecx
    81 00000083 50                              push dword eax
    82 00000084 68[DD000000]                    push dword format_afisare
    83 00000089 FF35[0D000000]                  push dword[descriptor_fisier]
    84 0000008F FF15[00000000]                  call [fprintf]
    85 00000095 83C40C                          add esp,4*3
    86 00000098 B800000000                      mov eax,0
    87 0000009D 59                              pop ecx
    88 0000009E E2E1                            loop bucla_2
    89                                          
    90                                          finalizare_scriere:
    91 000000A0 FF35[0D000000]                  push dword [descriptor_fisier]
    92 000000A6 FF15[00000000]                  call [fclose]
    93                                          
    94 000000AC 83C404                          add esp,4
    95 000000AF 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    96 000000B1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
