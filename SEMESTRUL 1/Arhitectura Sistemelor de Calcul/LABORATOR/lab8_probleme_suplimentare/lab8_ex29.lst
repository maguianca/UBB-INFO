     1                                  bits 32 
     2                                  global start        
     3                                  
     4                                  ; declare external functions needed by our program
     5                                  extern exit, fopen, fread, fclose, fprintf
     6                                  import exit msvcrt.dll  
     7                                  import fopen msvcrt.dll  
     8                                  import fread msvcrt.dll
     9                                  import fclose msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 696E7075742E747874-         nume_fisier db "input.txt", 0
    14 00000009 00                 
    15 0000000A 612B00                      mod_acces db "a+", 0
    16 0000000D 00000000                    descriptor_fisier dd 0
    17                                      
    18 00000011 01000000                    dimensiune dd 1
    19 00000015 64000000                    count dd 100
    20                                  
    21 00000019 <res 00000064>              sir resb 100
    22 0000007D 00000000                    lungime_sir dd 0
    23 00000081 01000000                    maxim dd 1
    24                                      
    25 00000085 256420202000                format_afisare db "%d   ", 0
    26 0000008B 0A000000                    zece dd 10
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                          ; FILE * fopen(const char* nume_fisier, const char * mod_acces)
    32 00000000 68[0A000000]                    push dword mod_acces
    33 00000005 68[00000000]                    push dword nume_fisier
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4 * 2
    36                                          
    37 00000013 83F800                          cmp EAX, 0
    38 00000016 7473                            je iesireBucla
    39                                          
    40 00000018 A3[0D000000]                    mov [descriptor_fisier], EAX
    41                                          
    42                                          ; int fread(void * str, int size, int count, FILE * stream)
    43 0000001D FF35[0D000000]                  push dword [descriptor_fisier]
    44 00000023 FF35[15000000]                  push dword [count]
    45 00000029 FF35[11000000]                  push dword [dimensiune]
    46 0000002F 68[19000000]                    push dword sir
    47 00000034 FF15[00000000]                  call [fread]
    48 0000003A 83C410                          add esp, 4*4
    49                                          
    50 0000003D A3[7D000000]                    mov [lungime_sir], EAX
    51                                          
    52 00000042 BE[19000000]                    mov esi, sir
    53 00000047 8B0D[7D000000]                  mov ecx, [lungime_sir]
    54 0000004D FC                              cld
    55 0000004E E33B                            jecxz iesireBucla
    56                                          
    57 00000050 B800000000                      mov eax, 0
    58                                          
    59                                          bucla:
    60 00000055 50                                  push eax
    61 00000056 AC                                  lodsb ; AL
    62 00000057 88C3                                mov BL, AL
    63 00000059 58                                  pop eax
    64                                              
    65 0000005A 80FB20                              cmp BL, ' '
    66 0000005D 7443                                je numar
    67                                              
    68 0000005F 80FB00                              cmp BL, 0
    69 00000062 740D                                je afisareNumar
    70                                              
    71 00000064 F725[8B000000]                      mul dword [zece]
    72 0000006A 80EB30                              sub BL, '0'
    73 0000006D 00D8                                add AL, BL
    74                                              
    75                                              finalBucla:
    76 0000006F E2E4                                loop bucla
    77                                          
    78                                          afisareNumar:
    79 00000071 A1[81000000]                        mov eax,[maxim]
    80                                              
    81 00000076 50                                  push dword eax
    82 00000077 68[85000000]                        push dword format_afisare
    83 0000007C FF35[0D000000]                      push dword [descriptor_fisier]
    84 00000082 FF15[00000000]                      call [fprintf]
    85 00000088 83C40C                              add esp,4*3
    86                                        
    87                                          iesireBucla:
    88 0000008B FF35[0D000000]                  push dword [descriptor_fisier]
    89 00000091 FF15[00000000]                  call [fclose]
    90 00000097 83C404                          add esp, 4
    91                                          
    92 0000009A 6A00                            push    dword 0      
    93 0000009C FF15[00000000]                  call    [exit]       
    94                                      numar:
    95 000000A2 3B05[81000000]                  cmp eax,dword[maxim]
    96 000000A8 7205                            jb peste
    97 000000AA A3[81000000]                    mov dword[maxim],eax
    98                                          peste:
    99 000000AF B800000000                      mov eax,0
   100 000000B4 EBB9                            jmp finalBucla
   101                                          
   102                                          
   103                                          
   104                                          
   105                                          
   106                                          
   107                                          
   108                                          
