     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fprintf,fclose,scanf               
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll    
    10                                  import fclose msvcrt.dll    
    11                                  import fprintf msvcrt.dll    
    12                                  import scanf msvcrt.dll    
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7700                        mod_acces db "w",0
    17 00000002 737472696E672E7478-         nume_fisier db "string.txt"
    17 0000000B 74                 
    18 0000000C 00000000                    descriptor_fisier dd 0
    19                                      
    20 00000010 <res 00000064>              text resb 100
    21 00000074 256300                      format db "%c",0
    22                                      
    23 00000077 00<rept>                    majuscule times 100 db 0
    24 000000DB 00000000                    maj dd 0
    25 000000DF 00<rept>                    minuscule times 100 db 0
    26 00000143 00000000                    min dd 0
    27                                      
    28 00000147 00<rept>                    inv_maj times 100 db 0
    29 000001AB 00<rept>                    inv_min times 100 db 0
    30                                      
    31 0000020F 257300                      format_afisare db "%s",0
    32                                     
    33                                  
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                       inverseaza_majuscule:
    37 00000000 60                              pushad 
    38 00000001 8B0D[DB000000]                  mov ecx,dword[maj]
    39 00000007 BE[77000000]                    mov esi,majuscule
    40 0000000C BF[47010000]                    mov edi,inv_maj
    41 00000011 033D[DB000000]                  add edi,dword[maj]
    42 00000017 4F                              dec edi
    43                                        repeta_1:
    44 00000018 FC                              cld
    45 00000019 AC                              lodsb 
    46 0000001A FD                              std
    47 0000001B AA                              stosb
    48 0000001C E2FA                            loop repeta_1
    49 0000001E 61                              popad 
    50 0000001F E9BA000000                      jmp jos
    51                                      inverseaza_minuscule:
    52 00000024 60                              pushad 
    53 00000025 8B0D[43010000]                  mov ecx,dword[min]
    54 0000002B BE[DF000000]                    mov esi,minuscule
    55 00000030 BF[AB010000]                    mov edi,inv_min
    56 00000035 033D[43010000]                  add edi,dword[min]
    57 0000003B 4F                              dec edi
    58                                        repeta_2:
    59 0000003C FC                              cld
    60 0000003D AC                              lodsb 
    61 0000003E FD                              std
    62 0000003F AA                              stosb
    63 00000040 E2FA                            loop repeta_2
    64 00000042 61                              popad 
    65 00000043 E989000000                      jmp jos_2
    66                                  
    67                                      start:
    68 00000048 68[00000000]                    push dword mod_acces
    69 0000004D 68[02000000]                    push dword nume_fisier
    70 00000052 FF15[00000000]                  call [fopen]
    71 00000058 83C408                          add esp,4*2
    72                                          
    73 0000005B 83F800                          cmp eax,0
    74 0000005E 0F84AD000000                    je finalizare_scriere
    75 00000064 A3[0C000000]                    mov [descriptor_fisier],eax
    76                                      citire:
    77 00000069 68[10000000]                    push dword text
    78 0000006E 68[74000000]                    push dword format
    79 00000073 FF15[00000000]                  call [scanf]
    80 00000079 83C408                          add esp,4*2
    81                                          
    82 0000007C B800000000                      mov eax,0
    83 00000081 A0[10000000]                    mov al,byte[text]
    84 00000086 3C2E                            cmp al,'.'
    85 00000088 743A                            je afisare
    86 0000008A 3C41                            cmp al,'A'
    87 0000008C 7234                            jb peste
    88 0000008E 3C5A                            cmp al,'Z'
    89 00000090 7715                            ja sare
    90 00000092 8B1D[DB000000]                  mov ebx,dword[maj]
    91 00000098 8883[77000000]                  mov [majuscule+ebx],al
    92 0000009E 8305[DB000000]01                add dword[maj],1
    93 000000A5 EB1B                            jmp peste
    94                                          sare:
    95 000000A7 3C7A                            cmp al,'z'
    96 000000A9 7717                            ja peste
    97 000000AB 3C61                            cmp al,'a'
    98 000000AD 7213                            jb peste
    99 000000AF 8B1D[43010000]                  mov ebx,dword[min]
   100 000000B5 8883[DF000000]                  mov [minuscule+ebx],al
   101 000000BB 8305[43010000]01                add dword[min],1
   102                                          peste:
   103 000000C2 EBA5                            jmp citire
   104                                          
   105                                          
   106                                      afisare:
   107 000000C4 833D[43010000]00                cmp dword[min],0
   108 000000CB 0F8553FFFFFF                    jnz  inverseaza_minuscule
   109                                          jos_2:
   110 000000D1 833D[DB000000]00                cmp dword[maj],0
   111 000000D8 0F8522FFFFFF                    jnz  inverseaza_majuscule
   112                                          ;call inverseaza_majuscule
   113                                          ;call inverseaza_minuscule
   114                                          jos:
   115 000000DE FC                              cld 
   116                                          
   117 000000DF 68[47010000]                    push dword inv_maj  ;majuscule
   118 000000E4 68[0F020000]                    push dword format_afisare
   119 000000E9 FF35[0C000000]                  push dword [descriptor_fisier]
   120 000000EF FF15[00000000]                  call [fprintf]
   121 000000F5 83C40C                          add esp,4*3
   122                                          
   123 000000F8 68[AB010000]                    push dword inv_min   ;minuscule
   124 000000FD 68[0F020000]                    push dword format_afisare
   125 00000102 FF35[0C000000]                  push dword [descriptor_fisier]
   126 00000108 FF15[00000000]                  call [fprintf]
   127 0000010E 83C40C                          add esp,4*3
   128                                      
   129                                      finalizare_scriere:
   130 00000111 FF35[0C000000]                  push dword [descriptor_fisier]
   131 00000117 FF15[00000000]                  call [fclose]
   132 0000011D 83C404                          add esp,4
   133 00000120 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   134 00000122 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
   135                                     
