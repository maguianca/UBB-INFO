     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    
    10                                  import scanf msvcrt.dll    
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 <res 00000064>              text resb 100
    15 00000064 00                          nr db 0
    16 00000065 256300                      format db "%c",0
    17 00000068 257300                      format_afisare db "%s",0
    18 0000006B 44617469206F207072-         mesaj db "Dati o propozitie:",0
    18 00000074 6F706F7A697469653A-
    18 0000007D 00                 
    19 0000007E 00000000                    len dd 0
    20 00000082 00<rept>                    result times 100 db 0
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 68[6B000000]                    push dword mesaj
    27 00000005 FF15[00000000]                  call [printf]
    28 0000000B 83C404                          add esp,4
    29 0000000E B900000000                      mov ecx,0
    30                                      citire:
    31 00000013 68[00000000]                    push dword text
    32 00000018 68[65000000]                    push dword format
    33 0000001D FF15[00000000]                  call [scanf]
    34 00000023 83C408                          add esp,4*2
    35                                          
    36 00000026 B800000000                      mov eax,0
    37 0000002B A0[00000000]                    mov al,byte[text]
    38 00000030 3C2E                            cmp al,'.'
    39 00000032 743E                            je afisare
    40 00000034 3C20                            cmp al,' '
    41 00000036 741D                            je numara
    42 00000038 E80A000000                      call litere
    43                                          
    44 0000003D EBD4                            jmp citire
    45                                          
    46                                          
    47                                      
    48                                       final:
    49 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the progra
    51                                       litere:
    52 00000047 60                              pushad 
    53 00000048 3C61                            cmp al,'a'
    54 0000004A 7207                            jb peste
    55 0000004C 3C7A                            cmp al,'z'
    56 0000004E 7703                            ja peste
    57                                          ;add byte[nr],1
    58 00000050 83C101                          add ecx,1
    59                                          
    60                                          peste:
    61 00000053 61                              popad
    62 00000054 C3                              ret
    63                                       numara:
    64 00000055 60                              pushad
    65 00000056 A1[7E000000]                    mov eax,[len]
    66 0000005B 83C130                          add ecx,'0'
    67 0000005E 8988[82000000]                  mov[result+eax],ecx
    68 00000064 8305[7E000000]01                add dword[len],1
    69 0000006B B900000000                      mov ecx,0
    70 00000070 EBA1                            jmp citire
    71                                       afisare:
    72 00000072 68[82000000]                    push dword result
    73 00000077 68[68000000]                    push dword format_afisare
    74 0000007C FF15[00000000]                  call [printf]
    75 00000082 83C408                          add esp,4*2
    76 00000085 EBB8                            jmp final
