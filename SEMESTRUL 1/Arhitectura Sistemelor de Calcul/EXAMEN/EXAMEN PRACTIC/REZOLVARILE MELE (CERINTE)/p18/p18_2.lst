     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,fread,fclose,fopen
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll    
    10                                  import fread msvcrt.dll    
    11                                  import fclose msvcrt.dll    
    12                                  import fopen msvcrt.dll    
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 7200                        mod_acces db "r",0
    17 00000002 696E2E747874                nume_fisier db "in.txt"
    18 00000008 00000000                    descriptor_fisier dd 0
    19 0000000C <res 00000064>              sir resb 100
    20 00000070 00000000                    len dd 0
    21 00000074 01000000                    dimensiune dd 1
    22 00000078 64000000                    count dd 100
    23 0000007C 00<rept>                    invers times 100 db 0
    24                                      
    25 000000E0 25730D0A00                  format db "%s",13,10,0
    26                                  
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      inversare:
    30 00000000 60                              pushad
    31 00000001 8B0D[70000000]                  mov ecx,[len]
    32 00000007 BE[0C000000]                    mov esi,sir
    33 0000000C BF[7C000000]                    mov edi,invers
    34 00000011 01CF                            add edi,ecx
    35 00000013 4F                              dec edi
    36                                        repeta:
    37 00000014 FC                              cld
    38 00000015 AC                              lodsb
    39 00000016 FD                              std 
    40 00000017 AA                              stosb 
    41 00000018 E2FA                            loop repeta
    42 0000001A 61                              popad
    43 0000001B C3                              ret
    44                                      start:
    45 0000001C 68[00000000]                    push dword mod_acces
    46 00000021 68[02000000]                    push dword nume_fisier 
    47 00000026 FF15[00000000]                  call [fopen]
    48 0000002C 83C408                          add esp,4*2
    49                                          
    50 0000002F 83F800                          cmp eax,0
    51 00000032 7442                            je finalizare_scriere
    52 00000034 A3[08000000]                    mov [descriptor_fisier],eax
    53                                          
    54 00000039 FF35[08000000]                  push dword[descriptor_fisier]
    55 0000003F FF35[78000000]                  push dword [count]
    56 00000045 FF35[74000000]                  push dword [dimensiune]
    57 0000004B 68[0C000000]                    push dword sir
    58 00000050 FF15[00000000]                  call [fread]
    59 00000056 83C410                          add esp,4*4
    60                                          
    61 00000059 A3[70000000]                    mov [len],eax
    62                                          
    63 0000005E E89DFFFFFF                      call inversare
    64                                          
    65 00000063 68[7C000000]                    push dword invers 
    66 00000068 68[E0000000]                    push dword format 
    67 0000006D FF15[00000000]                  call [printf]
    68 00000073 83C408                          add esp,4*2
    69                                          
    70                                      
    71                                      finalizare_scriere:
    72 00000076 FF35[08000000]                  push dword[descriptor_fisier]
    73 0000007C FF15[00000000]                  call [fclose]
    74 00000082 83C404                          add esp,4
    75 00000085 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000087 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
