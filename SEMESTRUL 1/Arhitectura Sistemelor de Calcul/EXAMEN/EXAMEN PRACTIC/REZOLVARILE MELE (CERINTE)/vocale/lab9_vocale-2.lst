     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  
     7                                  
     8                                  extern exit, fopen, fprintf, fclose, scanf,printf
     9                                  import exit msvcrt.dll  
    10                                  import fopen msvcrt.dll  
    11                                  import fprintf msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00000000                    n dd 0
    19 00000004 256400                      mesaj db "%d",0
    20 00000007 6E3D00                      format_s db "n=",0
    21 0000000A 6100                        mod_acces db "a",0
    22 0000000C 696E7075742E747874-         nume_fisier db "input.txt",0
    22 00000015 00                 
    23 00000016 FFFFFFFF                    descriptor_fisier dd -1
    24 0000001A <res 00000064>              text resb 100
    25 0000007E 256300                      format db "%c",0
    26 00000081 00<rept>                    cuvant times 100 db 0
    27 000000E5 6165696F754145494F-         vocale db "aeiouAEIOU"
    27 000000EE 55                 
    28                                      len_v equ $-vocale
    29 000000EF 256300                      form db "%c",0
    30                                      
    31                                  
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      reset:
    35 00000000 60                              pushad
    36 00000001 B964000000                      mov ecx, 100
    37 00000006 FC                              cld
    38 00000007 BF[81000000]                    mov edi, cuvant
    39 0000000C B000                            mov al, 0
    40 0000000E F3AA                            rep stosb
    41                                          
    42 00000010 61                              popad
    43 00000011 C3                              ret
    44                                      start:
    45                                      
    46 00000012 68[07000000]                    push dword format_s 
    47 00000017 FF15[00000000]                  call [printf]      
    48 0000001D 83C404                          add esp, 4*1       
    49                                          
    50 00000020 68[00000000]                    push dword n      
    51 00000025 68[04000000]                    push dword mesaj
    52 0000002A FF15[00000000]                  call [scanf]       
    53 00000030 83C408                          add esp, 4 * 2 
    54                                       
    55                                          
    56 00000033 68[0A000000]                    push dword mod_acces
    57 00000038 68[0C000000]                    push dword nume_fisier
    58 0000003D FF15[00000000]                  call [fopen]
    59 00000043 83C408                          add esp, 4 * 2
    60 00000046 83F800                          cmp eax, 0
    61 00000049 7451                            je final ; eroare la deschiderea fisierului
    62 0000004B A3[16000000]                    mov [descriptor_fisier], eax
    63                                      citire:
    64 00000050 BB00000000                      mov ebx,0
    65                                      urmator:
    66 00000055 BF[81000000]                    mov edi,cuvant
    67 0000005A BB00000000                      mov ebx,0
    68 0000005F E89CFFFFFF                      call reset
    69                                      repeta:
    70 00000064 68[1A000000]                    push dword text
    71 00000069 68[7E000000]                    push dword format
    72 0000006E FF15[00000000]                  call [scanf]
    73 00000074 83C408                          add esp, 4*2
    74                                          
    75 00000077 B800000000                      mov eax,0
    76 0000007C A0[1A000000]                    mov al,byte[text]
    77 00000081 3C23                            cmp al,'#'
    78 00000083 7408                            je finalizare_scriere
    79 00000085 3C20                            cmp al,' '
    80 00000087 741B                            je numar_vocale
    81                                          
    82 00000089 AA                              stosb
    83 0000008A 43                              inc ebx
    84 0000008B EBD7                            jmp repeta
    85                                          
    86                                          
    87                                          finalizare_scriere:
    88 0000008D FF35[16000000]                  push dword [descriptor_fisier]
    89 00000093 FF15[00000000]                  call [fclose]
    90 00000099 83C404                          add esp, 4
    91                                          
    92                                          final:
    93 0000009C 6A00                            push    dword 0      
    94 0000009E FF15[00000000]                  call    [exit]  
    95                                      numar_vocale:
    96 000000A4 BA00000000                      mov edx,0
    97 000000A9 89D9                            mov ecx,ebx
    98 000000AB BE[81000000]                    mov esi,cuvant
    99                                      repet_1:
   100 000000B0 FC                              cld
   101 000000B1 AC                              lodsb 
   102 000000B2 51                              push ecx
   103 000000B3 B90A000000                      mov ecx,len_v
   104 000000B8 BB00000000                      mov ebx,0
   105                                       repet_2:
   106 000000BD 3A83[E5000000]                  cmp al,[ebx+vocale]
   107 000000C3 7501                            jne peste
   108 000000C5 42                              inc edx
   109                                       peste:
   110 000000C6 43                              inc ebx
   111 000000C7 E2F4                            loop repet_2
   112 000000C9 59                              pop ecx
   113 000000CA E2E4                            loop repet_1
   114                                            
   115                                          
   116 000000CC 3B15[00000000]                  cmp edx,dword[n]
   117 000000D2 7219                            jb pest
   118                                          afis:
   119 000000D4 68[81000000]                    push dword cuvant
   120 000000D9 68[EF000000]                    push dword form
   121 000000DE FF35[16000000]                  push dword [descriptor_fisier]
   122 000000E4 FF15[00000000]                  call  [fprintf]
   123 000000EA 83C40C                          add  esp,4*3
   124                                          pest:
   125 000000ED 61                              popad 
   126 000000EE E962FFFFFF                      jmp urmator
   127                                          
   128                                         
   129                                         
