     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  extern exit, fopen, fprintf, fclose, scanf,printf
     7                                  import exit msvcrt.dll  
     8                                  import fopen msvcrt.dll  
     9                                  import fprintf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 00000000                    n dd 0
    17 00000004 256400                      mesaj db "%d",0
    18 00000007 6E3D00                      format_s db "n=",0
    19 0000000A 7700                        mod_acces db "w",0
    20 0000000C 766F632E74787400            nume_fisier db "voc.txt",0
    21 00000014 FFFFFFFF                    descriptor_fisier dd -1
    22 00000018 <res 00000064>              text resb 100
    23 0000007C 256300                      format db "%c",0
    24 0000007F 00<rept>                    cuvant times 100 db 0
    25 000000E3 6165696F754145494F-         vocale db "aeiouAEIOU"
    25 000000EC 55                 
    26                                      len_v equ $-vocale
    27 000000ED 25732000                    form db "%s ",0
    28 000000F1 00                          nr db 0
    29                                      
    30                                  
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      reset:
    34 00000000 60                              pushad
    35 00000001 B964000000                      mov ecx, 100
    36 00000006 FC                              cld
    37 00000007 BF[7F000000]                    mov edi, cuvant
    38 0000000C B000                            mov al, 0
    39 0000000E F3AA                            rep stosb
    40                                          
    41 00000010 61                              popad
    42 00000011 C3                              ret
    43                                      start:
    44                                      
    45 00000012 68[07000000]                    push dword format_s 
    46 00000017 FF15[00000000]                  call [printf]      
    47 0000001D 83C404                          add esp, 4*1       
    48                                          
    49 00000020 68[00000000]                    push dword n      
    50 00000025 68[04000000]                    push dword mesaj
    51 0000002A FF15[00000000]                  call [scanf]       
    52 00000030 83C408                          add esp, 4 * 2 
    53                                       
    54                                          
    55 00000033 68[0A000000]                    push dword mod_acces
    56 00000038 68[0C000000]                    push dword nume_fisier
    57 0000003D FF15[00000000]                  call [fopen]
    58 00000043 83C408                          add esp, 4 * 2
    59 00000046 83F800                          cmp eax, 0
    60 00000049 7462                            je final ; eroare la deschiderea fisierului
    61 0000004B A3[14000000]                    mov [descriptor_fisier], eax
    62                                      citire:
    63 00000050 BB00000000                      mov ebx,0
    64                                      urmator:
    65 00000055 BF[7F000000]                    mov edi,cuvant
    66 0000005A BB00000000                      mov ebx,0
    67 0000005F E89CFFFFFF                      call reset
    68 00000064 BA00000000                      mov edx,0
    69 00000069 C605[F1000000]00                mov byte[nr],0
    70                                      repeta:
    71 00000070 68[18000000]                    push dword text
    72 00000075 68[7C000000]                    push dword format
    73 0000007A FF15[00000000]                  call [scanf]
    74 00000080 83C408                          add esp, 4*2
    75                                          
    76 00000083 B800000000                      mov eax,0
    77 00000088 A0[18000000]                    mov al,byte[text]
    78 0000008D 3C23                            cmp al,'#'
    79 0000008F 740D                            je finalizare_scriere
    80 00000091 E81F000000                      call vocale_1
    81 00000096 3C20                            cmp al,' '
    82 00000098 743C                            je numar
    83                                          
    84 0000009A AA                              stosb
    85 0000009B 43                              inc ebx
    86 0000009C EBD2                            jmp repeta
    87                                          
    88                                          
    89                                          finalizare_scriere:
    90 0000009E FF35[14000000]                  push dword [descriptor_fisier]
    91 000000A4 FF15[00000000]                  call [fclose]
    92 000000AA 83C404                          add esp, 4
    93                                          
    94                                          final:
    95 000000AD 6A00                            push    dword 0      
    96 000000AF FF15[00000000]                  call    [exit]  
    97                                      
    98                                      vocale_1:
    99 000000B5 53                              push ebx
   100 000000B6 BE00000000                      mov esi,0
   101 000000BB B90A000000                      mov ecx,len_v
   102                                      bucla:
   103 000000C0 8A9E[E3000000]                  mov bl,[vocale+esi]
   104 000000C6 38C3                            cmp bl,al
   105 000000C8 7507                            jne sar
   106                                          ;inc edx
   107 000000CA 8305[F1000000]01                add dword[nr],1
   108                                          
   109                                          sar:
   110 000000D1 46                              inc esi
   111 000000D2 E2EC                            loop bucla
   112 000000D4 5B                              pop ebx
   113 000000D5 C3                              ret
   114                                       numar:
   115                                          ;cmp edx,eax
   116 000000D6 A1[00000000]                    mov eax,dword[n]
   117 000000DB 3905[F1000000]                  cmp dword[nr],eax
   118 000000E1 7219                            jb sar_2
   119 000000E3 68[7F000000]                    push dword cuvant
   120 000000E8 68[ED000000]                    push dword form
   121 000000ED FF35[14000000]                  push dword [descriptor_fisier]
   122 000000F3 FF15[00000000]                  call  [fprintf]
   123 000000F9 83C40C                          add  esp,4*3
   124                                          
   125                                          sar_2:
   126 000000FC BA00000000                      mov edx,0
   127 00000101 C705[F1000000]0000-             mov dword[nr],0
   127 00000109 0000               
   128 0000010B E945FFFFFF                      jmp urmator
   129                                     
   130                                          
   131                                         
   132                                         
