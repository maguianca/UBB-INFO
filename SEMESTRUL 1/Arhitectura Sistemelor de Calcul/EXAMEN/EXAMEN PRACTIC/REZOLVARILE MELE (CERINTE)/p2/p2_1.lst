     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf,fprintf, fopen,fclose         
     8                                  import exit msvcrt.dll    
     9                                  import scanf msvcrt.dll    
    10                                  import printf msvcrt.dll    
    11                                  import fprintf msvcrt.dll    
    12                                  import fopen msvcrt.dll    
    13                                  import fclose msvcrt.dll    
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17 00000000 00000000                   n dd 0
    18 00000004 00000000                   a dd 0
    19 00000008 7700                       mod_acces db "w",0
    20 0000000A 6F75747075742E7478-        nume_fisier db "output.txt"
    20 00000013 74                 
    21 00000014 00000000                   descriptor_fisier dd 0
    22 00000018 00000000                   suma_par dd 0
    23 0000001C 00000000                   suma_impar dd 0
    24 00000020 00000000                   dif dd 0
    25 00000024 2578202000                 afisare db "%x  ",0
    26 00000029 6E3D00                     mesaj db "n=",0
    27 0000002C 256400                     format db "%d",0
    28 0000002F 256300                     char db "%c",0
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33 00000000 68[08000000]                    push dword mod_acces
    34 00000005 68[0A000000]                    push dword nume_fisier
    35 0000000A FF15[00000000]                  call [fopen]
    36 00000010 83C408                          add esp,4*2
    37                                          
    38 00000013 83F800                          cmp eax,0
    39 00000016 0F84F6000000                    je finalizare_scriere
    40 0000001C A3[14000000]                    mov [descriptor_fisier],eax
    41                                    
    42 00000021 68[29000000]                    push dword mesaj
    43 00000026 FF15[00000000]                  call [printf]
    44 0000002C 83C404                          add esp,4
    45                                          
    46 0000002F 68[00000000]                    push dword n
    47 00000034 68[2C000000]                    push dword format
    48 00000039 FF15[00000000]                  call[scanf]
    49 0000003F 83C408                          add esp,4*2
    50                                          
    51 00000042 833D[00000000]00                cmp dword[n],0
    52 00000049 0F84C3000000                    je finalizare_scriere
    53                                          
    54 0000004F 8B0D[00000000]                  mov ecx,[n]
    55                                      repeta:
    56 00000055 51                              push ecx
    57 00000056 68[04000000]                    push dword a
    58 0000005B 68[2C000000]                    push dword format
    59 00000060 FF15[00000000]                  call[scanf]
    60 00000066 83C408                          add esp,4*2
    61                                          
    62 00000069 A1[04000000]                    mov eax,[a]
    63 0000006E A901000000                      test eax, 01h
    64 00000073 7408                            jz e_par
    65                                          
    66 00000075 0105[1C000000]                  add dword[suma_impar],eax
    67 0000007B EB06                            jmp aici
    68                                          
    69                                          e_par:
    70 0000007D 0105[18000000]                  add dword[suma_par],eax
    71                                          aici:
    72 00000083 59                              pop ecx
    73 00000084 E2CF                            loop repeta
    74                                          
    75 00000086 A1[18000000]                    mov eax,[suma_par]
    76 0000008B 8B1D[1C000000]                  mov ebx,[suma_impar]
    77 00000091 29D8                            sub eax,ebx
    78 00000093 A3[20000000]                    mov [dif],eax
    79                                          
    80 00000098 FF35[18000000]                  push dword [suma_par]
    81 0000009E 68[24000000]                    push dword afisare
    82 000000A3 FF35[14000000]                  push dword [descriptor_fisier]
    83 000000A9 FF15[00000000]                  call [fprintf]
    84 000000AF 83C40C                          add esp,4*3
    85                                          
    86 000000B2 6A0A                            push dword 10
    87 000000B4 68[2F000000]                    push dword char
    88 000000B9 FF35[14000000]                  push dword[descriptor_fisier]
    89 000000BF FF15[00000000]                  call [fprintf]
    90 000000C5 83C40C                          add esp,4*3
    91                                        
    92 000000C8 FF35[1C000000]                  push dword [suma_impar]
    93 000000CE 68[24000000]                    push dword afisare
    94 000000D3 FF35[14000000]                  push dword [descriptor_fisier]
    95 000000D9 FF15[00000000]                  call [fprintf]
    96 000000DF 83C40C                          add esp,4*3
    97                                          
    98 000000E2 6A0A                            push dword 10
    99 000000E4 68[2F000000]                    push dword char
   100 000000E9 FF35[14000000]                  push dword[descriptor_fisier]
   101 000000EF FF15[00000000]                  call [fprintf]
   102 000000F5 83C40C                          add esp,4*3
   103                                          
   104 000000F8 FF35[20000000]                  push dword [dif]
   105 000000FE 68[24000000]                    push dword afisare
   106 00000103 FF35[14000000]                  push dword [descriptor_fisier]
   107 00000109 FF15[00000000]                  call [fprintf]
   108 0000010F 83C40C                          add esp,4*3
   109                                          
   110                                       
   111                                      finalizare_scriere:
   112 00000112 FF35[14000000]                  push dword [descriptor_fisier]
   113 00000118 FF15[00000000]                  call [fclose]
   114 0000011E 83C404                          add esp,4
   115                                          
   116                                          ; exit(0)
   117 00000121 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   118 00000123 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
