     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf
     8                                  import exit msvcrt.dll    
     9                                  import scanf msvcrt.dll    
    10                                  import printf msvcrt.dll    
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00<rept>                    mari times 100 db 0
    15 00000064 00000000                    l1 dd 0
    16 00000068 00<rept>                    mici times 100 db 0
    17 000000CC 00000000                    l2 dd 0
    18 000000D0 2E2C2F3B2728297B7D-         speciale db ".,/;'(){}[]!@#$%^&*"
    18 000000D9 5B5D21402324255E26-
    18 000000E2 2A                 
    19                                      len_s equ $-speciale
    20 000000E3 256300                      format db "%c",0
    21 000000E6 <res 00000064>              text resb 100
    22 0000014A 25732000                    format_afisare db "%s ",0
    23                                  
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      verifica:
    27 00000000 56                              push esi
    28 00000001 B913000000                      mov ecx, len_s
    29 00000006 BE00000000                      mov esi, 0
    30                                      cauta:
    31 0000000B 8A96[D0000000]                  mov dl, [speciale+esi]
    32                                          
    33 00000011 38D0                            cmp al, dl
    34 00000013 740A                            je e_special
    35                                          
    36 00000015 46                              inc esi
    37 00000016 E2F3                            loop cauta
    38                                          
    39 00000018 BA00000000                      mov edx, 0
    40 0000001D EB05                            jmp nu_e
    41                                          
    42                                      e_special:
    43 0000001F BA01000000                      mov edx, 1
    44                                          
    45                                      nu_e:
    46 00000024 5E                              pop esi
    47 00000025 C3                              ret
    48                                  
    49                                      start:
    50 00000026 68[E6000000]                    push dword text
    51 0000002B 68[E3000000]                    push dword format
    52 00000030 FF15[00000000]                  call [scanf]
    53 00000036 83C408                          add esp,4*2
    54                                          
    55 00000039 B800000000                      mov eax,0
    56 0000003E A0[E6000000]                    mov al,byte[text]
    57 00000043 BA00000000                      mov edx,0
    58 00000048 3C2E                            cmp al,'.'
    59 0000004A 7440                            je afis
    60 0000004C E8AFFFFFFF                      call verifica
    61 00000051 83FA01                          cmp edx,1
    62 00000054 742C                            je sare
    63 00000056 3C5A                            cmp al,'Z'
    64 00000058 7215                            jb peste
    65 0000005A 8B1D[64000000]                  mov ebx,[l1]
    66 00000060 8883[68000000]                  mov [mici+ebx],al
    67 00000066 8305[64000000]01                add dword[l1],1
    68 0000006D EB13                            jmp sare
    69                                          peste:
    70 0000006F 8B1D[CC000000]                  mov ebx,[l2]
    71 00000075 8883[00000000]                  mov [mari+ebx],al
    72 0000007B 8305[CC000000]01                add dword[l2],1
    73                                          sare:
    74 00000082 EBA2                            jmp start
    75                                          
    76                                      
    77                                      final:
    78 00000084 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000086 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
    80                                      afis:
    81 0000008C 68[68000000]                    push dword mici
    82 00000091 68[4A010000]                    push dword format_afisare 
    83 00000096 FF15[00000000]                  call [printf]
    84 0000009C 83C408                          add esp,4*2
    85                                          
    86 0000009F 68[00000000]                    push dword mari
    87 000000A4 68[4A010000]                    push dword format_afisare
    88 000000A9 FF15[00000000]                  call [printf]
    89 000000AF 83C408                          add esp,4*2
    90 000000B2 EBD0                            jmp final
