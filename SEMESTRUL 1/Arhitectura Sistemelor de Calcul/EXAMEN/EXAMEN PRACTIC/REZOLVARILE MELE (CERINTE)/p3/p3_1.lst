     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,scanf
     8                                  import exit msvcrt.dll  
     9                                  import printf msvcrt.dll  
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00<rept>                    cuvant times 100 db 0
    15 00000064 00<rept>                    invers times 100 db 0
    16 000000C8 00000000                    len dd 0
    17 000000CC <res 00000064>              text resb 100
    18 00000130 257300                      format db "%s",0
    19 00000133 25732000                    afisare db "%s ",0
    20 00000137 00<rept>                    result times 100 db 0
    21                                      
    22                                  
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      reset:
    26 00000000 60                                pushad 
    27 00000001 B964000000                        mov ecx,100
    28 00000006 BF[00000000]                      mov edi, cuvant
    29 0000000B FC                                cld
    30 0000000C B000                              mov al,0
    31 0000000E F3AA                              rep stosb
    32 00000010 61                                popad 
    33 00000011 C3                                ret
    34                                      start:
    35 00000012 E8E9FFFFFF                      call reset
    36 00000017 BF[00000000]                    mov edi,cuvant
    37 0000001C BB00000000                      mov ebx,0
    38                                      citire:
    39 00000021 68[CC000000]                     push dword text
    40 00000026 68[30010000]                     push dword format 
    41 0000002B FF15[00000000]                   call [scanf]
    42 00000031 83C408                           add esp,4*2
    43                                           
    44 00000034 43                               inc ebx
    45                                           
    46 00000035 A0[CC000000]                     mov al,byte[text]
    47 0000003A 3C2E                             cmp al,'.'
    48 0000003C 7449                             je afis
    49                                           
    50 0000003E 3C20                             cmp al,' '
    51 00000040 740B                             je inverseaza
    52 00000042 AA                               stosb 
    53 00000043 EBDC                             jmp citire
    54                                           
    55                                      final:
    56 00000045 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000047 FF15[00000000]                  call    [exit]   
    58                                      inverseaza:
    59 0000004D 60                              pushad 
    60 0000004E 89D9                            mov ecx,ebx
    61 00000050 BE[00000000]                    mov esi,cuvant
    62 00000055 BF[64000000]                    mov edi,invers
    63 0000005A 01DF                            add edi,ebx
    64 0000005C 4B                              dec ebx
    65                                      repeta:
    66 0000005D FC                              cld 
    67 0000005E AC                              lodsb 
    68 0000005F FD                              std
    69 00000060 AA                              stosb
    70 00000061 E2FA                            loop repeta
    71 00000063 89D9                            mov ecx,ebx
    72 00000065 BE[64000000]                    mov esi,invers
    73 0000006A BF[37010000]                    mov edi,result
    74                                      repeta_2:
    75 0000006F A4                              movsb
    76 00000070 E2FD                            loop repeta_2
    77 00000072 011D[C8000000]                  add dword[len],ebx
    78 00000078 8B1D[C8000000]                  mov ebx,[len]
    79 0000007E C683[37010000]20                mov byte[result+ebx],' '
    80 00000085 EB8B                            jmp start
    81                                      afis:
    82 00000087 68[37010000]                    push dword result
    83 0000008C 68[30010000]                    push dword format 
    84 00000091 FF15[00000000]                  call [printf]
    85 00000097 83C408                          add esp,4*2
    86 0000009A EBA9                            jmp final
