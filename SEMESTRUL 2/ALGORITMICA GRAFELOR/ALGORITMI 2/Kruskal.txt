#include <iostream>
#include <vector>
#include <fstream>
#include <algorithm>

using namespace std;

struct Varf {
    int u, v, pondere;
    bool operator<(const Varf& other) const {
        return pondere < other.pondere;
    }
};

int find(vector<int>& parent, int i) {
    if (parent[i] != i) {
        parent[i] = find(parent, parent[i]);
    }
    return parent[i];
}

void union_sets(vector<int>& parent, vector<int>& key, int u, int v) {
    int root_u = find(parent, u);
    int root_v = find(parent, v);
    if (key[root_u] < key[root_v]) {
        parent[root_u] = root_v;
    }
    else if (key[root_u] > key[root_v]) {
        parent[root_v] = root_u;
    }
    else {
        parent[root_v] = root_u;
        key[root_u]++;
    }
}

pair<int, vector<pair<int, int>>> kruskal(int n, vector<Varf>& muchie) {
    sort(muchie.begin(), muchie.end());

    vector<int> parent(n);
    vector<int> key(n, 0);
    for (int i = 0; i < n; ++i) {
        parent[i] = i;
    }

    int totalCost = 0;
    vector<pair<int, int>> muchii;

    for (const auto& mu : muchie) {
        int u = find(parent, mu.u);
        int v = find(parent, mu.v);
        if (u != v) {
            muchii.emplace_back(mu.u, mu.v);
            totalCost += mu.pondere;
            union_sets(parent, key, u, v);
        }
    }

    return { totalCost, muchii };
}

int main(int argc, char** argv) {
    ifstream fin(argv[1]);
    ofstream fout(argv[2]);
    int n, m;
    fin >> n >> m;
    vector<Varf> muchie(m);
    for (int i = 0; i < m; ++i) {
        fin >> muchie[i].u >> muchie[i].v >> muchie[i].pondere;
    }

    auto result = kruskal(n, muchie);

    int totalCost = result.first;
    auto muchii = result.second;

    fout << totalCost << endl;
    fout << muchii.size() << endl;
    for (const auto& mu : muchii) {
        fout << mu.first << " " << mu.second << endl;
    }
    return 0;
}
